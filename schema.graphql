### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthMutationResponse implements MutationResponse {
  """Similar to HTTP status, represents the status of the mutation"""
  code: String!

  """Human-readable message for the UI"""
  message: String!
  nonce: Int

  """Indicates whether the mutation was successful"""
  success: Boolean!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Feed {
  count: Int!
  id: ID
  links: [Link!]!
}

type Link {
  createdAt: DateTime!
  description: String!
  id: Int!
  postedBy: User
  url: String!
  voters: [User!]!
}

input LinkOrderByInput {
  createdAt: Sort
  description: Sort
  url: Sort
}

type LoginMutationResponse implements MutationResponse {
  """Similar to HTTP status, represents the status of the mutation"""
  code: String!

  """Human-readable message for the UI"""
  message: String!

  """Indicates whether the mutation was successful"""
  success: Boolean!
  user: User
}

type Mutation {
  """
  Check if the user with the current public Address exists in the database
  """
  auth(address: String!): AuthMutationResponse!
  deleteLink(id: Int!): Link!
  login(address: String!, signature: String!): LoginMutationResponse!
  post(description: String!, url: String!): Link!
  updateLink(description: String, id: Int!, url: String): Link!
  vote(linkId: Int!): Vote
}

interface MutationResponse {
  """Similar to HTTP status, represents the status of the mutation"""
  code: String!

  """Human-readable message for the UI"""
  message: String!

  """Indicates whether the mutation was successful"""
  success: Boolean!
}

type Query {
  feed(filter: String, orderBy: [LinkOrderByInput!], skip: Int, take: Int): Feed!
  link(id: Int!): Link
  user(address: String!): User
}

enum Sort {
  asc
  desc
}

type User {
  """the user's unique public wallet address"""
  address: String!

  """the user's bio description"""
  bio: String

  """the user's cover image url"""
  coverImageUrl: String

  """the user's email"""
  email: String

  """the user's id index"""
  id: Int!
  links: [Link!]!

  """the user's name"""
  name: String

  """the user's generated nonce for wallet authentication"""
  nonce: Int

  """the user's profile image url"""
  profileImageUrl: String

  """the user's jwt authentication token for sesson data"""
  token: String

  """the user's unique username"""
  username: String
  votes: [Link!]!
}

type Vote {
  link: Link!
  user: User!
}